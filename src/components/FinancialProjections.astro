---
//@ts-nocheck

import FinancialProjectionsData from "@data/financialProjections.json";
const projects = FinancialProjectionsData.values;

console.log("FinancialProjectionsData: ", FinancialProjectionsData);
---

<section class="projections">
  <div class="panel">
    <div class="text">
      <h1>{FinancialProjectionsData.title}</h1>
      <p>
        {FinancialProjectionsData.subtitle}
      </p>
    </div>
    <div class="navigation">
      <button id="finProj-navBack">
        <div class="icon"></div>
      </button>
      <button id="finProj-navNext">
        <div class="icon"></div>
      </button>
    </div>
  </div>
  <div class="measurestick"><!-- really hacky!!1! --></div>
  <div class="measurestickInner"></div>
  <ul class="scroller">
    <!-- <h1>test</h1> -->
    {
      projects.map((project) => (
        <li class="projectEntry">
          <div>
            <div class="icon" data-icon={project.icon} />
            <h2>{project.title}</h2>
          </div>
          <p>{project.description}</p>
        </li>
      ))
    }
  </ul>
</section>

<style>
  .projections {
    overflow-x: hidden;
    padding: var(--sectionPad);
    background-color: var(--secondary01);
    grid-column: 1 / 5;
    display: grid;
    grid-template-columns: subgrid;
    grid-template-rows: auto;
    .panel {
      grid-row: 1;
      grid-column: 2 / 4;
      display: flex;
      justify-content: space-between;
      .text {
        width: 40vw;

      }
      .navigation {
        margin-top: auto;
        display: flex;
        gap: var(--space-2xs);
        button {
          /* background-color: red; */
          width: var(--space-l-xl);
          /* padding: 10%; */
          aspect-ratio: 1 / 1;
          border-radius: 1000px;

          .icon {
            mask-image: url(../icons/arrow-left.svg);
            mask-repeat: no-repeat;
            mask-size: contain;
            mask-position: center;
            height: 100%;
            width: 100%;
            transition: all 0.2s ease-in-out;
          }

          &#finProj-navBack {
            background-color: var(--primary03);
            .icon {
              background-color: var(--secondary02);
              transform: scale(50%);
            }
            &:hover {
              background-color: var(--secondary02);
              .icon {
                background-color: var(--primary03);
                transform: scale(60%);
              }
            }
            border: 1px solid var(--primary03);
          }
          &#finProj-navNext {
            background-color: #ffc32b;

            .icon {
              background-color: var(--primary03);
              transform: scaleX(-100%) scale(50%);
            }
            &:hover {
              background-color: #ffe5a2;
              .icon {
                transform: scaleX(-100%) scale(60%);
              }
            }
          }
        }
      }
    }

    .measurestick {
      height: 10px;
      background-color: red;
      grid-column: 1;
      grid-row: 1;
    }
    .measurestickInner {
      height: 10px;
      background-color: blue;
      grid-column: 2;
      grid-row: 1;
    }

    .measurestick,
    .measurestickInner {
      /*toggle comment for testing*/
      height: 0px !important;
    }

    ul.scroller {
      margin-top: var(--space-m);
      padding: 0;
      grid-row: 2;
      grid-column: 1 / 5;
      display: grid;
      grid-auto-flow: column;
      grid-auto-columns: max-content;
      overflow-x: hidden;
      overflow-y: hidden;
      min-height: 40vh;
      gap: var(--space-m);

      li.projectEntry {
        background-color: var(--secondary02);
        --textcol1: var(--primary03);
        border-radius: 20px;
        height: 85%;
        list-style: none;
        display: flex;
        flex-direction: column;
        /* justify-content: space-between; */
        padding: var(--space-m);
        gap: var(--space-s);
        transition: all 0.2s ease-in-out;
        cursor: pointer;
        .icon {
          background-color: var(--primary03);
          height: var(--space-m-l);
          aspect-ratio: 1 / 1;
          margin-bottom: var(--space-s);
          mask-repeat: no-repeat;
          mask-size: contain;
          mask-position: center;
          &[data-icon="cal"] {
            mask-image: url(../icons/cal.svg);
          }
          &[data-icon="card"] {
            mask-image: url(../icons/card.svg);
          }
          &[data-icon="law"] {
            mask-image: url(../icons/law.svg);
          }
          &[data-icon="money"] {
            mask-image: url(../icons/money.svg);
          }
        }
        &.active {
          background-color: var(--primary03);
          --textcol1: var(--secondary02);
          height: 100%;
          .icon {
            background-color: var(--primary01);
          }
        }
      }
    }
  }
  @media (max-width: 880px) {
    .projections {
      .panel {
        /* position: relative; */
        flex-direction: column;
        .text {
          width: 100%;
        }
        .navigation {
          position: absolute;
          left: 0;
          /* top: 50vh; */
          /* transform: scale(120%); */
          /* margin-top: var(--space-xs); */
          width: 100%;
          justify-content: space-between;
          button {
            width: height;
            padding: 0;
            aspect-ratio: 1 / 1;
            scale: 110%;
            .icon {
              height: 100%;
              width: 100%;
            }
            &#finProj-navBack {
              /* margin-left: auto; */
              /* transform: translateX(calc(var(--space-s) * -1)); */
              margin-left: 10vw;
              filter: drop-shadow(0px 0px 1px #ffffffb0);
            }
            &#finProj-navNext {
              /* margin-right: auto; */
              /* transform: translateX(var(--space-s)); */
              margin-right: 10vw;
            }
          }
        }
      }
      ul.scroller {
        height: 100%;
        min-height: auto;
        li.projectEntry {
          /*           opacity: 0;
          &.active {
            opacity: 1;
          } */
          p {
            margin-bottom: var(--space-m);
          }
        }
      }
    }
  }
</style>

<script>
  import { set } from "astro:schema";

  let activeEntry = 0;
  const scroller = document.querySelector(".scroller") as HTMLElement;
  const measurestick = document.querySelector(".measurestick") as HTMLElement;
  const innerMeasurestick = document.querySelector(
    ".measurestickInner"
  ) as HTMLElement;
  const projectEntries =
    document.querySelectorAll<HTMLElement>(".projectEntry");

  //knapper:
  const navigation = document.querySelector(".navigation") as HTMLElement;
  const navBack = document.getElementById("finProj-navBack") as HTMLElement;
  const navNext = document.getElementById("finProj-navNext") as HTMLElement;
  // as HTMLElement; så jeg ikke får røde linjer - irriterede mig personligt.

  navBack.addEventListener("click", () => {
    if (activeEntry > 0) {
      activeEntry--;
      toggleActiveEntry(activeEntry);
    }
  });

  navNext.addEventListener("click", () => {
    if (activeEntry < projectEntries.length - 1) {
      activeEntry++;
      toggleActiveEntry(activeEntry);
    }
  });

  let marginToApply = 0;

  function applyEntryWidth() {
    //hvis vindue bredde er mindre end 660:
    marginToApply = measurestick.clientWidth;
    let widthToApply;

    if (window.innerWidth < 660) {
      widthToApply = innerMeasurestick.clientWidth * 2;
      scroller.style.gap = marginToApply + "px";
      setNavPosition();
    } else if (window.innerWidth < 880) {
      widthToApply = innerMeasurestick.clientWidth;
      scroller.style.removeProperty("gap");
    } else {
      widthToApply = (innerMeasurestick.clientWidth * 2) / 3;
      scroller.style.removeProperty("gap");
    }

    projectEntries.forEach((projectEntry, i) => {
      projectEntry.style.width = widthToApply + "px"; //sætter bredden til alle elementer
      projectEntry.style.marginLeft = i === 0 ? marginToApply + "px" : "0"; //hvis entry er
      //den første sættes marginToApply til venstres
      projectEntry.style.marginRight =
        i === projectEntries.length - 1 ? marginToApply + "px" : "0";
      //hvis entry er længden - 1 (det sidste) sættes marginToApply til højre

      projectEntry.addEventListener("click", () => toggleActiveEntry(i));
    });
  }

  function toggleActiveEntry(i: number) {
    activeEntry = i;
    console.log("activeEntry: ", activeEntry);

    projectEntries.forEach((projectEntry, j) => {
      projectEntry.classList.remove("active");

      if (j === activeEntry) {
        projectEntry.classList.add("active");

        const scrollLeft = projectEntry.offsetLeft - marginToApply;
        scroller.scrollTo({
          left: scrollLeft,
          top: 0,
          behavior: "smooth",
        });
      }
    });
  }

  function setNavPosition() {
    const scrollerRect = scroller.getBoundingClientRect();
    const navigationGoTo =
      scrollerRect.top + window.scrollY + scroller.clientHeight * 0.9;
    navigation.style.top = navigationGoTo + "px";
  }

  projectEntries.forEach((projectEntry, i) => {
    if (i === 0) {
      projectEntry.classList.add("active");
    }
  });
  requestAnimationFrame(() => {
    setNavPosition();
  });
  window.addEventListener("resize", applyEntryWidth);
  applyEntryWidth();
</script>
